'''
In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as
the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

    ● For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2.
    These are the only nodes with twins for n = 4.
    
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

Definition for singly-linked list.
    function ListNode(val, next) {
        this.val = (val===undefined ? 0 : val)
        this.next = (next===undefined ? null : next)
    }
'''

class Node:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
        

def twin_node(head) -> int:
#find out if the linked list has an even length
#sum every other node starting at node 0

    new_list = []
    twin_total = 0
    twin_max = 0
    while head != None: # 1 > 3 > 3 > 4 > None
        new_list.append(head.val)
        head = head.next
    for i in range(len(new_list)):
        ending_index = len(new_list) - 1
        twin_total = new_list[i] + new_list[ending_index-i]
        if(twin_total > twin_max):
            twin_max = twin_total
        
    return twin_max  
